/*
Sum Root to Leaf Numbers

Given a binary tree containing digits from 0-9 only, each root-to-leaf path could represent a number.

An example is the root-to-leaf path 1->2->3 which represents the number 123.

Find the total sum of all root-to-leaf numbers.

For example,

    1
   / \
  2   3
The root-to-leaf path 1->2 represents the number 12.
The root-to-leaf path 1->3 represents the number 13.

Return the sum = 12 + 13 = 25.
*/


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */

 
public class Solution {
    public int sumNumbers(TreeNode root) {
    	return addPaths(root, 0, 0);
    }

    int addPaths(TreeNode root, int num, int sum) {
    	if (root == null) {
    		return sum;
    	}

    	num = num * 10 + root.val;
    	if (root.left == null && root.right == null) {
    		sum += num;
    		return sum;  //returning sum here necessary because it there could be single node also
    	} 
    	sum = addPaths(root.left, num, sum) + addPaths(root.right, num, sum); 
    	return sum;
    }
}