/*
	Word Pattern

	Given a pattern and a string str, find if str follows the same pattern.

	Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in str.

	Examples:
	pattern = "abba", str = "dog cat cat dog" should return true.
	pattern = "abba", str = "dog cat cat fish" should return false.
	pattern = "aaaa", str = "dog cat cat dog" should return false.
	pattern = "abba", str = "dog dog dog dog" should return false.

*/

public class Solution {
    public boolean wordPattern(String pattern, String str) {
       if (pattern == null && str == null) {
       		return true;
       } else if (pattern == null || str == null){
       		return false;
       }

       String[] words = str.split(" ");
       if (words.length != pattern.length()) {
       		return false;
       } 

       Map<Character, String> map = new HashMap<Character, String>();
       for (int i = 0; i < pattern.length(); i++) {
       		if (map.containsKey(pattern.charAt(i))) {
       			if (!map.get(pattern.charAt(i)).equals(words[i])) {
       				return false;
       			}

       		} else {
       			for (Map.Entry<Character, String> w : map.entrySet()) {
       				if (w.getValue().equals(words[i])) {
       					return false;
       				}
       			}
       			map.put(pattern.charAt(i), words[i]);
       		}
       }
       return true;
    }
}

//--------------------------------- MORE CLEAN WAY --------------------------------

public class Solution {
    public boolean wordPattern(String pattern, String str) {
            String[] first = new String[26];
            Map<String, Character> map = new HashMap<String, Character>();

            String[] strs = str.split("\\s+");
            if (strs.length != pattern.length())
                  return false;
                  
            for (int i = 0; i < pattern.length(); i++) {
                  char ch = pattern.charAt(i);
                  if (map.containsKey(strs[i]) && first[ch-'a'] != null) {
                        if (!strs[i].equals(first[ch - 'a']) || map.get(strs[i]) != ch) {
                              return false;
                        }
                  } else if (!map.containsKey(strs[i]) && first[ch-'a'] == null) {
                        first[ch - 'a'] = strs[i];
                        map.put(strs[i], ch);
                  } else {                      
                        return false;
                  }
            }
            return true;
    }
}