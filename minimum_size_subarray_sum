/*
Minimum Size Subarray Sum

Given an array of n positive integers and a positive integer s, find the minimal length of a subarray of which the sum â‰¥ s. If there isn't one, return 0 instead.

For example, given the array [2,3,1,2,4,3] and s = 7,
the subarray [4,3] has the minimal length under the problem constraint.

*/

with O(n)


public class Solution {
    public int minSubArrayLen(int s, int[] nums) {
 		int i = 0, j = 0, mlength = nums.length +1;
 		int tSum = 0;

 		while (j < nums.length) {
 		   tSum = tSum + nums[j];
 			while (tSum >= s) {
 				mlength = Math.min(mlength, j-i+1);
 				tSum = tSum - nums[i++];
 			}
 			j++;
 		}

 		if (mlength == nums.length+1) {
 			return 0;
 		} else {
 			return mlength;
 		}
    }
}