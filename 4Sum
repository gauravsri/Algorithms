/*4Sum

Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.

Note:
Elements in a quadruplet (a,b,c,d) must be in non-descending order. (ie, a ≤ b ≤ c ≤ d)
The solution set must not contain duplicate quadruplets.
    For example, given array S = {1 0 -1 0 -2 2}, and target = 0.

    A solution set is:
    (-1,  0, 0, 1)
    (-2, -1, 1, 2)
    (-2,  0, 0, 2)

*/

public class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
 		Arrays.sort(nums);
 		int i = 0, j = 0, sum = 0, k = 0, l = 0;
 		HashSet<ArrayList<Integer>> set = new HashSet<ArrayList<Integer>>();
 		List<List<Integer>> arr;
 		arr = new ArrayList<List<Integer>>();

 		for (i = 0; i < nums.length; i++) {
 			for (j = i+1; j < nums.length; j++) {
 				k = j + 1;
 				l = nums.length -1;
 				while (k < l) {
 					sum = nums[i] + nums[j] + nums[k] + nums[l];
 					if (target == sum) {
 						ArrayList<Integer> temp = new ArrayList<Integer>();
 						temp.add(nums[i]);
 						temp.add(nums[j]);
 						temp.add(nums[k]);
 						temp.add(nums[l]);
 						if(!set.contains(temp)) {
 						   set.add(temp);
 						   arr.add(temp);
 						}
 						k++;
 						l--;
 					} else if (sum < target) {
 						k++;
 					} else if (sum > target) {
 						l--;
 					} 
 				} 				
 			}
 		}
 		return (List)arr;       
    }

}