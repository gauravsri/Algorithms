/*
Binary Tree Level Order Traversal

Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).

For example:
Given binary tree {3,9,20,#,#,15,7},
    3
   / \
  9  20
    /  \
   15   7
return its level order traversal as:
[
  [3],
  [9,20],
  [15,7]
]

*/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 

public class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
 		List<List<Integer>> result = new ArrayList<List<Integer>>();
 		TreeNode temp;

 		Queue<TreeNode> queue = new LinkedList<TreeNode>();

 		if (root != null) {
 			queue.add(root);
 		}       

 		while (!queue.isEmpty()) {
 			int size = queue.size();
 			List<Integer> arr = new ArrayList<Integer>();
 					
 			for (int i = 0; i < size; i++) {
 				temp = queue.remove();
 				arr.add(temp.val);

 				if (temp.left != null) {
 					queue.add(temp.left);
 				}

 				if (temp.right != null) {
 					queue.add(temp.right);
 				}
 			}
 			result.add(arr);
 		}
 		return result;
    }
}
