/*
Invert Binary Tree

Invert a binary tree.

     4
   /   \
  2     7
 / \   / \
1   3 6   9
to
     4
   /   \
  7     2
 / \   / \
9   6 3   1

*/



/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode invertTree(TreeNode root) {
 		if (root != null) {
 			reverse(root);
 		}   
 		return root;    
    }

    public void reverse(TreeNode node) {
    	if (node == null) {
    		return;
    	}

    	TreeNode left = node.left, right = node.right;

    	if (left != null) {
    		reverse(left);
    	}

    	if (right != null) {
    		reverse(right);
    	}

    	node.left = right;
    	node.right = left;
    }
}


_____________________________________________________
//More cleaner solution

public class Solution {
    /**
     * @param root: a TreeNode, the root of the binary tree
     * @return: nothing
     */
    public void invertBinaryTree(TreeNode root) {
      if (root != null) 
        return;

      TreeNode left = root.left;
      root.left = root.right;
      root.right = left;
      invertBinaryTree(root.left);
      invertBinaryTree(root.right);
    }
}

//--------------

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode invertTree(TreeNode root) {
        if (root == null)
            return null;
        invertTree(root.left);
        invertTree(root.right);
        TreeNode left = root.left;
        TreeNode right = root.right;
        
        root.left = right;
        root.right = left;
        return root;
    }
}
