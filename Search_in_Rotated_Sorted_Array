/*
 Search in Rotated Sorted Array

 Suppose a sorted array is rotated at some pivot unknown to you beforehand.

 (i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).

 You are given a target value to search. If found in the array return its index, otherwise return -1.

 You may assume no duplicate exists in the array.

*/


public class Solution {
    public int search(int[] nums, int target) {
        return binarySearch(nums, 0, nums.length-1, target);
    }

    int binarySearch(int[] a, int l, int r, int target) {
    	if (l > r )
    		return -1;

    	int m = (l+r)/2;

    	if (target == a[m]) {
    		return m;
    	}	

    	if (a[l] <= a[m]) {
    		if (a[l] <= target && target < a[m]) {
    			//left block
    			return binarySearch(a, l, m-1, target);
    		} else {
    			return binarySearch(a, m+1, r, target);
    		}
    	} else {
    		if (a[m] < target && target <= a[r]) {
    			return binarySearch(a, m+1, r, target);
    		} else {
    			return binarySearch(a, l, m-1, target);
    		}
    	}
    }
}