/*
Remove Duplicates from Sorted List II

Given a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list.

For example,
Given 1->2->3->3->4->4->5, return 1->2->5.
Given 1->1->1->2->3, return 2->3.
*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */

 
public class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        if (head == null) {
            return head;
        }
        
		ListNode prev = null;
		ListNode curr = head;
		ListNode after = head.next;        
		boolean duplicate = false;

		while (curr != null) {
			int no = curr.val;
			duplicate = false;
			while(after != null && no ==after.val) {
				after = after.next;
				duplicate = true;
			}
			if (duplicate) {
				if (prev == null) {
					head = after;
				} else {
					prev.next = after;
				}
			} else {
				prev = curr;
			}
			curr = after;
			if (after != null) {
				after = after.next;
			}
		}
		return head;
    }
}