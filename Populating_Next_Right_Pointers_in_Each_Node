/*
	Populating Next Right Pointers in Each Node

*/

/**
 * Definition for binary tree with next pointer.
 * public class TreeLinkNode {
 *     int val;
 *     TreeLinkNode left, right, next;
 *     TreeLinkNode(int x) { val = x; }
 * }
 */
 
//WITHOUT EXTRA SPACE
/**
 * Definition for binary tree with next pointer.
 * public class TreeLinkNode {
 *     int val;
 *     TreeLinkNode left, right, next;
 *     TreeLinkNode(int x) { val = x; }
 * }
 */
 

public class Solution {
    public void connect(TreeLinkNode root) {
  if(root == null) 
        return;
 
    TreeLinkNode lastHead = root;//prevous level's head 
    TreeLinkNode lastCurrent = null;//previous level's pointer
    TreeLinkNode currentHead = null;//currnet level's head 
    TreeLinkNode current = null;//current level's pointer
 
    while(lastHead!=null){
        lastCurrent = lastHead;
 
        while(lastCurrent!=null){
            if(currentHead == null){
                currentHead = lastCurrent.left;
                current = lastCurrent.left;
            }else{
                current.next = lastCurrent.left;
                current = current.next;
            }
 
            if(currentHead != null){
                current.next = lastCurrent.right;
                current = current.next;
            }
 
            lastCurrent = lastCurrent.next;
        }
 
        //update last head
        lastHead = currentHead;
        currentHead = null;
      }
    }
}

 






//WITH EXTRA SPACE
public class Solution {
    public void connect(TreeLinkNode root) {
 		TreeLinkNode temp = null, prev = null;
 		Queue<TreeLinkNode> queue = new LinkedList<TreeLinkNode>();

 		if (root != null) {
 			queue.add(root);
 		}

 		while (queue.size() > 0) {
 			int size = queue.size();

 			for (int i=0; i < size; i++) {
 				temp = queue.remove();
 				if (i == 0) {
 					prev = temp;
 				} else {
 					prev.next = temp;
 					prev = temp;
 				}

 				if (temp.left != null) {
 					queue.add(temp.left);
 				}

 				if (temp.right != null) {
 					queue.add(temp.right);
 				}
 			}
 		}
    }
}