/*
 Binary Tree Inorder Traversal

 Given a binary tree, return the inorder traversal of its nodes' values.

For example:
Given binary tree {1,#,2,3},
   1
    \
     2
    /
   3
 return [1,3,2].
 
*/


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */

//RECURSIVE

public class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> result = new ArrayList<Integer>();

        if (root != null) {
           inorder(root, result);
        }
        
        return result;
    }

    void inorder(TreeNode node, List<Integer> result) {
    	
    	if (node.left != null) {
    	   inorder(node.left, result);
    	}

    	result.add(node.val);

    	if (node.right != null) {
    		inorder(node.right, result);
    	}
    	
    }
}

//ITERATIVE

public class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
    List<Integer> result = new ArrayList<Integer>();
    Stack<TreeNode> stack = new Stack<TreeNode>();

    TreeNode curr = root;
    boolean done = false;

    while (!done) {
    	if (curr != null) {
    		while (curr != null) {
    			stack.push(curr);
    			curr = curr.left;
    		}
    	} else {
    		if (!stack.isEmpty()) {
    			curr = stack.pop();
    			result.add(curr.val);
    			curr = curr.right;
    		} else {
    			done = true;
    		}
    	}
    }

    return result;
  }
}