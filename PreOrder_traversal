/*
Binary Tree Preorder Traversal
Given a binary tree, return the preorder traversal of its nodes' values.

For example:
Given binary tree {1,#,2,3},

   1
    \
     2
    /
   3
return [1,2,3].

*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */


 //RECURSIVE

public class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> result = new ArrayList<Integer>();

        traverse(root, result);
        return result;
    }

    void traverse(TreeNode node, List<Integer> result) {
    	if (node == null) {
    		return;
    	}
    	result.add(node.val);
    	if (node.left != null) {
    		traverse(node.left, result);
    	}

    	if(node.right != null) {
    	  traverse(node.right, result);
    	}
    }


}


//ITERATIVE
public class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
    	Stack<TreeNode> stack = new Stack<TreeNode>();
    	List<Integer> result = new ArrayList<Integer>();

    	if (root == null) {
    		return result;
    	}

    	stack.push(root);

    	while(!stack.isEmpty()) {
    		TreeNode node = stack.pop();
    		result.add(node.val);

    		if (node.right != null) {
    			stack.push(node.right);
    		}
    		
    		if (node.left != null) {
    			stack.push(node.left);
    		}
    	}
    	return result;
    }
}