/*

 Majority Elements II
 Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times. The algorithm should run in linear time and in O(1) space

*/


public class Solution {
    public List<Integer> majorityElement(int[] nums) {
 		int c1 = 0, c2 = 0;
 		Integer n1 = null, n2 = null;

 		for (int n: nums) {
 		     if (n1!= null && n1.intValue() == n) {
 				c1++;
 			 } else if (n2!= null && n2.intValue() == n) {
 				c2++;
 			 } else if (c1 == 0) {
 				c1++;
 				n1 = n;
 			 } else if (c2 == 0) {
 				c2++;
 				n2 = n;
 			 } else {
 				c1--;
 				c2--;
 			}
 		}

 		c1 = 0;
 		c2 = 0;

 		for (int n : nums) {
 			if (n1!= null && n1.intValue() == n) {
 				c1++;
 			} 
 			if (n2!= null && n2.intValue() == n) {
 				c2++;
 			}
 		}

 		List<Integer> result = new ArrayList<Integer>();
 		if (c1 > (nums.length/3)) {
 			result.add(n1);
 		} 
 		
 		if (c2 > (nums.length/3)) {
 			result.add(n2);
 		}

 		return result;
    }
}