/*
	Balanced Binary Tree

	Given a binary tree, determine if it is height-balanced.

    For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.


*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 
public class Solution {
    public boolean isBalanced(TreeNode root) {
 		if (getHeight(root) == -1) {
 			return false;
 		} else {
 			return true;
 		}
    }

    int getHeight(TreeNode node) {
    	if (node == null)
    		return 0;

    	int lSum = getHeight(node.left);
    	if (lSum == -1) {
    		return -1;
    	}

    	int rSum = getHeight(node.right);
    	if (rSum == -1) {
    		return -1;
    	}

    	if (Math.abs(lSum - rSum) > 1) {
    		return -1;
    	} else {
    		return Math.max( getHeight(node.left) + 1,  getHeight(node.right) + 1);
    	}

    }
}